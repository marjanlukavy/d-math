#include<iostream>

using namespace std;

#define INF 999

int V, start;
int pnode;
int matrix[30][30] = {
        {0,3,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {3,0,7,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,7,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,1,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,4,0,5,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,5,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {6,0,0,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,2,0,0,0,0,8,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,3,0,0,0,0,1,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,1,0,0,0,0,4,0,2,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,3,0,0,0,0,2,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,1,0,0,0,0,4,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,7,0,0,0,0,0,0,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,3,0,0,0,0,1,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,8,0,0,0,0,3,0,7,0,0,0,0,5,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,5,0,0,0,0,7,0,4,0,0,0,0,3,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,4,0,2,0,0,0,0,4,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,2,0,0,0,0,0,0,5,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,7,0,3,0,0,0,0,7,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,3,0,1,0,0,0,0,3,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,1,0,1,0,0,0,0,8,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,8,0,0,0,0,1,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,8,0,0,0,0,0,0,7},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,4,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,4,0,2,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,0,3,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,3,0,1,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,6},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,6,0}
};


int shortest_dist[30];
bool visited[30] = {0};
int parent[30];

int getNearest() {
    int minValue = 999, minNode = 0;
    for (int i = 0; i < V; i++) {
        if (!visited[i] && shortest_dist[i] < minValue) {
            minValue = shortest_dist[i];
            minNode = i;
        }

    }
    return minNode;

}


void dijkstra() {
    for (int i = 0; i < V; i++) {
        int nearest = getNearest();
        visited[nearest] = true;
        for (int adj = 0; adj < V; adj++) {
            if (matrix[nearest][adj] != INF && shortest_dist[adj] >
                shortest_dist[nearest] + matrix[nearest][adj]) {
                shortest_dist[adj] = shortest_dist[nearest] + matrix[nearest][adj];
                parent[adj] = nearest;
            }
        }
    }
}


int main(void) {
    V = 30;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (matrix[i][j] == 0 && i != j) {
                matrix[i][j] = 999;
            }
        }
    }
    start = 0;
    for (int i = 0; i < V; i++) {
        parent[i] = i;
        shortest_dist[i] = INF;
    }
    shortest_dist[start] = 0;

    dijkstra();

    cout << "Довжина мінамального шляху : ";
    cout << shortest_dist[V - 1] << endl;
    cout << "Шлях : ";
    cout << endl;
    cout << V << " ";
    pnode = parent[V - 1];
    cout << endl;

    while (pnode != start) {
            cout <<  pnode + 1 << endl;


        pnode = parent[pnode];
    }
    cout << '1';
    cout << endl;

    return 0;
}
